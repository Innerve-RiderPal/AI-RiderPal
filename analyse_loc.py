import os
from dotenv import load_dotenv
import openai
import math
from maps_test import get_directions, get_waypoints

load_dotenv()

# Set your OpenAI API key (consider loading this securely via environment variables)
openai.api_key = os.getenv('OPENAI_API_KEY')

origin_lat, origin_lng = 18.517500125498525, 73.87937093008591  
dest_lat, dest_lng = 18.607221238680346, 73.87507577543245  
api_key = os.getenv('api_key')  # Fetch API key from environment


# Dictionary of waypoints from Google Maps (keys: "lat,lon", values: navigation instructions)
waypoints = get_waypoints(api_key, f"{origin_lat},{origin_lng}", f"{dest_lat},{dest_lng}")
print(waypoints)

def haversine(coord1, coord2):
    """
    Calculate the great-circle distance in kilometers between two points using the haversine formula.
    
    Parameters:
        coord1 (tuple): (latitude, longitude) of the first point.
        coord2 (tuple): (latitude, longitude) of the second point.
    
    Returns:
        float: Distance in kilometers.
    """
    lat1, lon1 = coord1
    lat2, lon2 = coord2

    # Convert latitude and longitude from degrees to radians
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])

    # Differences in coordinates
    dlat = lat2 - lat1
    dlon = lon2 - lon1

    # Haversine formula calculation
    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    radius = 6371  # Earth radius in kilometers
    return radius * c

def get_nearest_waypoint(rider_coord, waypoint_dict: dict):
    """
    Determine the nearest waypoint from the provided dictionary.
    
    The dictionary's keys are coordinate strings in the format "lat,lon" and the values
    are navigation instructions (possibly containing HTML).
    
    Parameters:
        rider_coord (tuple): Rider's coordinates as (latitude, longitude).
        waypoint_dict (dict): Dictionary of waypoints.
    
    Returns:
        tuple: (nearest waypoint coordinates (tuple), its navigation instruction (str),
                distance in kilometers (float), original coordinate string (str))
    """
    nearest = None
    min_distance = float("inf")
    nearest_instruction = None
    nearest_coord_str = None

    for coord_str, instruction in waypoint_dict.items():
        # Parse the key to extract latitude and longitude
        lat_str, lon_str = coord_str.split(',')
        waypoint_coord = (float(lat_str), float(lon_str))
        distance = haversine(rider_coord, waypoint_coord)
        if distance < min_distance:
            min_distance = distance
            nearest = waypoint_coord
            nearest_instruction = instruction
            nearest_coord_str = coord_str

    return nearest, nearest_instruction, min_distance, nearest_coord_str

def generate_location_description(rider_coord, nearest_coord, instruction, distance, coord_str):
    """
    Build a detailed prompt for GPT that describes the rider's current location 
    relative to the nearest waypoint and its navigation instruction.
    
    Parameters:
        rider_coord (tuple): The rider's coordinates.
        nearest_coord (tuple): Coordinates of the nearest waypoint.
        instruction (str): Navigation instruction associated with the waypoint.
        distance (float): Distance (in km) between the rider and the waypoint.
        coord_str (str): The original coordinate string of the waypoint.
    
    Returns:
        str: The descriptive narrative generated by the GPT API.
    """
    # Build the prompt with clear, descriptive instructions.
    prompt = f"""
You are an expert navigator and travel guide. Your task is to generate a vivid, detailed description of a rider's current location relative to a known waypoint, using the navigation instruction provided.

Rider's Current Coordinates:
    - Latitude: {rider_coord[0]}
    - Longitude: {rider_coord[1]}

Nearest Waypoint Details:
    - Coordinates: {coord_str} (Latitude: {nearest_coord[0]}, Longitude: {nearest_coord[1]})
    - Approximate Distance from Rider: {distance:.2f} km
    - Navigation Instruction: {instruction}

Using this information, please generate a detailed description that includes:
1. The spatial relationship between the rider's position and the waypoint.
2. Any directional cues (e.g., north, south, east, west) that might be inferred.
3. Contextual hints about nearby landmarks or road features based on the navigation instruction.

Provide your response in clear, concise, and in the least number of words language.
"""
    # Call the OpenAI Chat Completion API
    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",  # You can choose another model if desired
        messages=[
            {"role": "system", "content": "You are a helpful assistant that describes locations."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7  # Adjust for more or less creative responses
    )
    return response.choices[0].message.content

def main():
    # Example rider coordinates (update these coordinates as needed)
    rider_coord = (18.5204, 73.8567)  # Example: Coordinates in Pune

    # Determine the nearest waypoint, its instruction, and the distance to it
    nearest_coord, instruction, distance, coord_str = get_nearest_waypoint(rider_coord, waypoints)
    
    # Generate a detailed description using GPT
    description = generate_location_description(rider_coord, nearest_coord, instruction, distance, coord_str)
    
    print("Generated Location Description:\n")
    print(description)

if __name__ == "__main__":
    main()
